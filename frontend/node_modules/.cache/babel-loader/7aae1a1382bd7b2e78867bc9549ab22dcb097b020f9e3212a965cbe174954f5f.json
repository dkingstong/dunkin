{"ast":null,"code":"var _jsxFileName = \"/Users/denniskingston/Desktop/method/frontend/my-app/src/dashboard/Deposits.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport Typography from '@mui/material/Typography';\nimport Title from './Title';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction preventDefault(event) {\n  event.preventDefault();\n}\nconst accounts = await axios.get('http://127.0.0.1:4000/accounts/source');\nconst names = ['Oliver Hansen', 'Van Henry', 'April Tucker', 'Ralph Hubbard', 'Omar Alexander', 'Carlos Abbott', 'Miriam Wagner', 'Bradley Wilkerson', 'Virginia Andrews', 'Kelly Snyder'];\nfunction getStyles(name, personName, theme) {\n  return {\n    fontWeight: personName.indexOf(name) === -1 ? theme.typography.fontWeightRegular : theme.typography.fontWeightMedium\n  };\n}\nexport default function Deposits(props) {\n  _s();\n  // we are going to have filters to filter by branch etc.\n  // we need to call the backend to populate all the different branches and accounts\n  // the onChange function will need to query the db to get the aggregated r\n  const {\n    title,\n    sourceType\n  } = props;\n  const theme = useTheme();\n  const [source, setSource] = React.useState([]);\n  const [amount, setAmount] = React.useState('$0');\n  const handleChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setSource(\n    // On autofill we get a stringified value.\n    typeof value === 'string' ? value.split(',') : value);\n    // make the call function to the backend to calculate the amount.\n    setAmount(`$2000`);\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      component: \"p\",\n      variant: \"h4\",\n      children: amount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: \"demo-simple-select-label\",\n          children: sourceType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"demo-simple-select-label\",\n          id: \"demo-simple-select\",\n          value: source,\n          label: sourceType,\n          onChange: handleChange,\n          children: names.map(name => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: name,\n            style: getStyles(name, source, theme),\n            children: name\n          }, name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(Deposits, \"e/zhPQdiBjj9hZlgcgGTjf2vtxE=\", false, function () {\n  return [useTheme];\n});\n_c = Deposits;\nvar _c;\n$RefreshReg$(_c, \"Deposits\");","map":{"version":3,"names":["React","useTheme","Typography","Title","InputLabel","MenuItem","FormControl","Select","axios","jsxDEV","_jsxDEV","preventDefault","event","accounts","get","names","getStyles","name","personName","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","Deposits","props","_s","title","sourceType","source","setSource","useState","amount","setAmount","handleChange","target","value","split","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","component","variant","fullWidth","id","labelId","label","onChange","map","style","_c","$RefreshReg$"],"sources":["/Users/denniskingston/Desktop/method/frontend/my-app/src/dashboard/Deposits.js"],"sourcesContent":["import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport Typography from '@mui/material/Typography';\nimport Title from './Title';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport axios from 'axios'\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst accounts = await axios.get('http://127.0.0.1:4000/accounts/source')\n\nconst names = [\n  'Oliver Hansen',\n  'Van Henry',\n  'April Tucker',\n  'Ralph Hubbard',\n  'Omar Alexander',\n  'Carlos Abbott',\n  'Miriam Wagner',\n  'Bradley Wilkerson',\n  'Virginia Andrews',\n  'Kelly Snyder',\n];\n\nfunction getStyles(name, personName, theme) {\n  return {\n    fontWeight:\n      personName.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n  };\n}\n\nexport default function Deposits(props) {\n\n  // we are going to have filters to filter by branch etc.\n  // we need to call the backend to populate all the different branches and accounts\n  // the onChange function will need to query the db to get the aggregated r\n  const {title, sourceType} = props\n  const theme = useTheme();\n  const [source, setSource] = React.useState([]);\n  const [amount, setAmount] = React.useState('$0');\n\n\n  const handleChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setSource(\n      // On autofill we get a stringified value.\n      typeof value === 'string' ? value.split(',') : value,\n    );\n    // make the call function to the backend to calculate the amount.\n    setAmount(\n      `$2000`\n    )\n  };\n\n\n  return (\n    <React.Fragment>\n      <Title>{title}</Title>\n      <Typography component=\"p\" variant=\"h4\">\n        {amount}\n      </Typography>\n      <div>\n      <FormControl fullWidth>\n        <InputLabel id=\"demo-simple-select-label\">{sourceType}</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={source}\n          label={sourceType}\n          onChange={handleChange}\n        >\n          {names.map((name) => (\n            <MenuItem\n              key={name}\n              value={name}\n              style={getStyles(name, source, theme)}\n            >\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      </div>\n    </React.Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}